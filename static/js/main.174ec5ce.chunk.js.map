{"version":3,"sources":["assets/logo.svg","components/NavMenuLink/NavMenuLink.tsx","components/Logo/Logo.tsx","components/Header/Header.tsx","constants/urls.ts","components/Footer/Footer.tsx","components/Loading/Loading.tsx","components/User/User.tsx","configs/api.ts","constants/api.ts","services/users.ts","constants/http.ts","pages/Home/Home.tsx","components/Post/Post.tsx","services/posts.ts","pages/Posts/Posts.tsx","Routes/Routes.tsx","Template/Template.tsx","App/App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","NavMenuLink","url","children","Nav","Link","as","NavLink","to","exact","Logo","src","LogoImage","className","alt","Header","Navbar","collapseOnSelect","expand","bg","variant","Container","Brand","Toggle","aria-controls","Collapse","id","memo","props","Card","Body","Title","name","Text","email","api","axios","create","baseURL","getUsers","a","get","data","QUERY_STATUS","HomePage","useQuery","status","error","message","map","user","key","title","body","getPosts","PostsPage","post","Routes","path","fallback","Home","Posts","Template","App","basename","process","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","document","getElementById","URL","href","origin","addEventListener","fetch","headers","response","contentType","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.174ec5ce.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport Nav from 'react-bootstrap/Nav';\nimport { NavLink } from 'react-router-dom';\n\nexport type Props = {\n  url: string;\n  children: string;\n};\n\nconst NavMenuLink = ({ url, children }: Props) => (\n  <Nav.Link as={NavLink} to={url} exact={url === '/'}>\n    {children}\n  </Nav.Link>\n);\n\nexport default NavMenuLink;\n","import React from 'react';\nimport LogoImage from '../../assets/logo.svg';\nimport './Logo.scss';\n\nconst Logo = () => <img src={LogoImage} className=\"logo\" alt=\"Logo\" />;\n\nexport default Logo;\n","import React from 'react';\nimport Navbar from 'react-bootstrap/Navbar';\nimport Nav from 'react-bootstrap/Nav';\nimport Container from 'react-bootstrap/Container';\nimport NavMenuLink from '../NavMenuLink';\nimport Logo from '../Logo';\nimport { HOME_PAGE, POSTS_PAGE } from '../../constants/urls';\n\nconst Header = () => (\n  <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\n    <Container>\n      <Navbar.Brand>\n        <Logo />\n      </Navbar.Brand>\n      <Navbar.Toggle aria-controls=\"navbar-nav\" />\n      <Navbar.Collapse id=\"navbar-nav\">\n        <Nav className=\"mr-auto\">\n          <NavMenuLink url={HOME_PAGE}>Home</NavMenuLink>\n          <NavMenuLink url={POSTS_PAGE}>Posts</NavMenuLink>\n        </Nav>\n      </Navbar.Collapse>\n    </Container>\n  </Navbar>\n);\n\nexport default Header;\n","export const HOME_PAGE = '/';\nexport const POSTS_PAGE = '/posts';\n","import React, { memo } from 'react';\nimport './Footer.scss';\n\nconst Footer = () => <footer className=\"footer\">Â© 2020</footer>;\n\nexport default memo(Footer);\n","import React, { memo } from 'react';\nimport './Loading.scss';\n\nconst Loading = () => (\n  <div className=\"loading\">\n    <div className=\"spinner\">\n      <div className=\"bounce1\" />\n      <div className=\"bounce2\" />\n      <div className=\"bounce3\" />\n    </div>\n  </div>\n);\n\nexport default memo(Loading);\n","import React, { memo } from 'react';\nimport Card from 'react-bootstrap/Card';\n\nexport type Props = {\n  name: string;\n  email: string;\n};\n\nconst User = (props: Props) => {\n  return (\n    <Card>\n      <Card.Body>\n        <Card.Title>{props.name}</Card.Title>\n        <Card.Text>{props.email}</Card.Text>\n      </Card.Body>\n    </Card>\n  );\n};\n\nexport default memo(User);\n","import axios from 'axios';\nimport { API_BASE_URL } from '../constants/api';\n\nconst api = axios.create({\n  baseURL: API_BASE_URL\n});\n\nexport default api;\n","export const API_BASE_URL = '/api';\n","import api from '../configs/api';\n\ntype User = {\n  id: number;\n  name: string;\n  username: string;\n  email: string;\n};\n\nexport const getUsers = async (): Promise<User[]> => {\n  const { data } = await api.get('/users');\n  return data;\n};\n","export const QUERY_STATUS = {\n  LOADING: 'loading',\n  ERROR: 'error',\n  SUCCESS: 'success'\n};\n","import React from 'react';\nimport { useQuery } from 'react-query';\nimport Container from 'react-bootstrap/Container';\nimport User from '../../components/User';\nimport Loading from '../../components/Loading';\nimport { getUsers } from '../../services/users';\nimport { QUERY_STATUS } from '../../constants/http';\n\nconst HomePage = () => {\n  const { status, data, error } = useQuery('users', getUsers);\n\n  if (status === QUERY_STATUS.LOADING) {\n    return <Loading />;\n  }\n\n  if (status === QUERY_STATUS.ERROR) {\n    return <div>{error?.message}</div>;\n  }\n\n  return (\n    <Container>\n      {data?.map((user) => (\n        <User key={user.id} name={user.name} email={user.email} />\n      ))}\n    </Container>\n  );\n};\n\nexport default HomePage;\n","import React, { memo } from 'react';\nimport Card from 'react-bootstrap/Card';\n\nexport type Props = {\n  title: string;\n  body: string;\n};\n\nconst Post = (props: Props) => {\n  return (\n    <Card>\n      <Card.Body>\n        <Card.Title>{props.title}</Card.Title>\n        <Card.Text>{props.body}</Card.Text>\n      </Card.Body>\n    </Card>\n  );\n};\n\nexport default memo(Post);\n","import api from '../configs/api';\n\ntype Post = {\n  id: number;\n  userId: number;\n  title: string;\n  body: string;\n};\n\nexport const getPosts = async (): Promise<Post[]> => {\n  const { data } = await api.get('/posts');\n  return data;\n};\n","import React from 'react';\nimport { useQuery } from 'react-query';\nimport Container from 'react-bootstrap/Container';\nimport Post from '../../components/Post';\nimport Loading from '../../components/Loading';\nimport { getPosts } from '../../services/posts';\nimport { QUERY_STATUS } from '../../constants/http';\n\nconst PostsPage = () => {\n  const { status, data, error } = useQuery('posts', getPosts);\n\n  if (status === QUERY_STATUS.LOADING) {\n    return <Loading />;\n  }\n\n  if (status === QUERY_STATUS.ERROR) {\n    return <div>{error?.message}</div>;\n  }\n\n  return (\n    <Container>\n      {data?.map((post) => (\n        <Post key={post.id} title={post.title} body={post.body} />\n      ))}\n    </Container>\n  );\n};\n\nexport default PostsPage;\n","import React, { Suspense } from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport Loading from '../components/Loading';\nimport HomePage from '../pages/Home';\nimport PostsPage from '../pages/Posts';\nimport { HOME_PAGE, POSTS_PAGE } from '../constants/urls';\n\nconst Routes = () => (\n  <Switch>\n    <Route path={HOME_PAGE} exact>\n      <Suspense fallback={<Loading />}>\n        <HomePage />\n      </Suspense>\n    </Route>\n    <Route path={POSTS_PAGE}>\n      <Suspense fallback={<Loading />}>\n        <PostsPage />\n      </Suspense>\n    </Route>\n  </Switch>\n);\n\nexport default Routes;\n","import React from 'react';\nimport Header from '../components/Header';\nimport Footer from '../components/Footer';\nimport Routes from '../Routes';\nimport './Template.scss';\n\nconst Template = () => {\n  return (\n    <div className=\"app\">\n      <Header />\n      <main className=\"app-content\">\n        <Routes />\n      </main>\n      <Footer />\n    </div>\n  );\n};\n\nexport default Template;\n","import React from 'react';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport Template from '../Template';\n\nconst App = () => (\n  <Router basename={process.env.PUBLIC_URL}>\n    <Template />\n  </Router>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/main.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nif (process.env.NODE_ENV === 'production') {\n  serviceWorker.register();\n} else {\n  serviceWorker.unregister();\n}\n"],"sourceRoot":""}